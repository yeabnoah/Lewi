
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `virtual_tryon` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model virtual_tryon
 * 
 */
export type virtual_tryonModel = runtime.Types.Result.DefaultSelection<Prisma.$virtual_tryonPayload>

export type AggregateVirtual_tryon = {
  _count: Virtual_tryonCountAggregateOutputType | null
  _min: Virtual_tryonMinAggregateOutputType | null
  _max: Virtual_tryonMaxAggregateOutputType | null
}

export type Virtual_tryonMinAggregateOutputType = {
  id: string | null
  userImageUrl: string | null
  userId: string | null
  outfitImageUrl: string | null
  generatedImageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type Virtual_tryonMaxAggregateOutputType = {
  id: string | null
  userImageUrl: string | null
  userId: string | null
  outfitImageUrl: string | null
  generatedImageUrl: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type Virtual_tryonCountAggregateOutputType = {
  id: number
  userImageUrl: number
  userId: number
  outfitImageUrl: number
  generatedImageUrl: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type Virtual_tryonMinAggregateInputType = {
  id?: true
  userImageUrl?: true
  userId?: true
  outfitImageUrl?: true
  generatedImageUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type Virtual_tryonMaxAggregateInputType = {
  id?: true
  userImageUrl?: true
  userId?: true
  outfitImageUrl?: true
  generatedImageUrl?: true
  createdAt?: true
  updatedAt?: true
}

export type Virtual_tryonCountAggregateInputType = {
  id?: true
  userImageUrl?: true
  userId?: true
  outfitImageUrl?: true
  generatedImageUrl?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type Virtual_tryonAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which virtual_tryon to aggregate.
   */
  where?: Prisma.virtual_tryonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of virtual_tryons to fetch.
   */
  orderBy?: Prisma.virtual_tryonOrderByWithRelationInput | Prisma.virtual_tryonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.virtual_tryonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` virtual_tryons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` virtual_tryons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned virtual_tryons
  **/
  _count?: true | Virtual_tryonCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Virtual_tryonMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Virtual_tryonMaxAggregateInputType
}

export type GetVirtual_tryonAggregateType<T extends Virtual_tryonAggregateArgs> = {
      [P in keyof T & keyof AggregateVirtual_tryon]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVirtual_tryon[P]>
    : Prisma.GetScalarType<T[P], AggregateVirtual_tryon[P]>
}




export type virtual_tryonGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.virtual_tryonWhereInput
  orderBy?: Prisma.virtual_tryonOrderByWithAggregationInput | Prisma.virtual_tryonOrderByWithAggregationInput[]
  by: Prisma.Virtual_tryonScalarFieldEnum[] | Prisma.Virtual_tryonScalarFieldEnum
  having?: Prisma.virtual_tryonScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Virtual_tryonCountAggregateInputType | true
  _min?: Virtual_tryonMinAggregateInputType
  _max?: Virtual_tryonMaxAggregateInputType
}

export type Virtual_tryonGroupByOutputType = {
  id: string
  userImageUrl: string
  userId: string
  outfitImageUrl: string
  generatedImageUrl: string
  createdAt: Date
  updatedAt: Date
  _count: Virtual_tryonCountAggregateOutputType | null
  _min: Virtual_tryonMinAggregateOutputType | null
  _max: Virtual_tryonMaxAggregateOutputType | null
}

type GetVirtual_tryonGroupByPayload<T extends virtual_tryonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Virtual_tryonGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Virtual_tryonGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Virtual_tryonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Virtual_tryonGroupByOutputType[P]>
      }
    >
  >



export type virtual_tryonWhereInput = {
  AND?: Prisma.virtual_tryonWhereInput | Prisma.virtual_tryonWhereInput[]
  OR?: Prisma.virtual_tryonWhereInput[]
  NOT?: Prisma.virtual_tryonWhereInput | Prisma.virtual_tryonWhereInput[]
  id?: Prisma.StringFilter<"virtual_tryon"> | string
  userImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  userId?: Prisma.StringFilter<"virtual_tryon"> | string
  outfitImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  generatedImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  createdAt?: Prisma.DateTimeFilter<"virtual_tryon"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"virtual_tryon"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type virtual_tryonOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userImageUrl?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  outfitImageUrl?: Prisma.SortOrder
  generatedImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type virtual_tryonWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.virtual_tryonWhereInput | Prisma.virtual_tryonWhereInput[]
  OR?: Prisma.virtual_tryonWhereInput[]
  NOT?: Prisma.virtual_tryonWhereInput | Prisma.virtual_tryonWhereInput[]
  userImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  userId?: Prisma.StringFilter<"virtual_tryon"> | string
  outfitImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  generatedImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  createdAt?: Prisma.DateTimeFilter<"virtual_tryon"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"virtual_tryon"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type virtual_tryonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userImageUrl?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  outfitImageUrl?: Prisma.SortOrder
  generatedImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.virtual_tryonCountOrderByAggregateInput
  _max?: Prisma.virtual_tryonMaxOrderByAggregateInput
  _min?: Prisma.virtual_tryonMinOrderByAggregateInput
}

export type virtual_tryonScalarWhereWithAggregatesInput = {
  AND?: Prisma.virtual_tryonScalarWhereWithAggregatesInput | Prisma.virtual_tryonScalarWhereWithAggregatesInput[]
  OR?: Prisma.virtual_tryonScalarWhereWithAggregatesInput[]
  NOT?: Prisma.virtual_tryonScalarWhereWithAggregatesInput | Prisma.virtual_tryonScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"virtual_tryon"> | string
  userImageUrl?: Prisma.StringWithAggregatesFilter<"virtual_tryon"> | string
  userId?: Prisma.StringWithAggregatesFilter<"virtual_tryon"> | string
  outfitImageUrl?: Prisma.StringWithAggregatesFilter<"virtual_tryon"> | string
  generatedImageUrl?: Prisma.StringWithAggregatesFilter<"virtual_tryon"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"virtual_tryon"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"virtual_tryon"> | Date | string
}

export type virtual_tryonCreateInput = {
  id?: string
  userImageUrl: string
  outfitImageUrl: string
  generatedImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutVirtual_tryonsInput
}

export type virtual_tryonUncheckedCreateInput = {
  id?: string
  userImageUrl: string
  userId: string
  outfitImageUrl: string
  generatedImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type virtual_tryonUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  outfitImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  generatedImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutVirtual_tryonsNestedInput
}

export type virtual_tryonUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  outfitImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  generatedImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type virtual_tryonCreateManyInput = {
  id?: string
  userImageUrl: string
  userId: string
  outfitImageUrl: string
  generatedImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type virtual_tryonUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  outfitImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  generatedImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type virtual_tryonUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  outfitImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  generatedImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type Virtual_tryonListRelationFilter = {
  every?: Prisma.virtual_tryonWhereInput
  some?: Prisma.virtual_tryonWhereInput
  none?: Prisma.virtual_tryonWhereInput
}

export type virtual_tryonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type virtual_tryonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userImageUrl?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  outfitImageUrl?: Prisma.SortOrder
  generatedImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type virtual_tryonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userImageUrl?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  outfitImageUrl?: Prisma.SortOrder
  generatedImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type virtual_tryonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userImageUrl?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  outfitImageUrl?: Prisma.SortOrder
  generatedImageUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type virtual_tryonCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.virtual_tryonCreateWithoutUserInput, Prisma.virtual_tryonUncheckedCreateWithoutUserInput> | Prisma.virtual_tryonCreateWithoutUserInput[] | Prisma.virtual_tryonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.virtual_tryonCreateOrConnectWithoutUserInput | Prisma.virtual_tryonCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.virtual_tryonCreateManyUserInputEnvelope
  connect?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
}

export type virtual_tryonUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.virtual_tryonCreateWithoutUserInput, Prisma.virtual_tryonUncheckedCreateWithoutUserInput> | Prisma.virtual_tryonCreateWithoutUserInput[] | Prisma.virtual_tryonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.virtual_tryonCreateOrConnectWithoutUserInput | Prisma.virtual_tryonCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.virtual_tryonCreateManyUserInputEnvelope
  connect?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
}

export type virtual_tryonUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.virtual_tryonCreateWithoutUserInput, Prisma.virtual_tryonUncheckedCreateWithoutUserInput> | Prisma.virtual_tryonCreateWithoutUserInput[] | Prisma.virtual_tryonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.virtual_tryonCreateOrConnectWithoutUserInput | Prisma.virtual_tryonCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.virtual_tryonUpsertWithWhereUniqueWithoutUserInput | Prisma.virtual_tryonUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.virtual_tryonCreateManyUserInputEnvelope
  set?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  disconnect?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  delete?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  connect?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  update?: Prisma.virtual_tryonUpdateWithWhereUniqueWithoutUserInput | Prisma.virtual_tryonUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.virtual_tryonUpdateManyWithWhereWithoutUserInput | Prisma.virtual_tryonUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.virtual_tryonScalarWhereInput | Prisma.virtual_tryonScalarWhereInput[]
}

export type virtual_tryonUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.virtual_tryonCreateWithoutUserInput, Prisma.virtual_tryonUncheckedCreateWithoutUserInput> | Prisma.virtual_tryonCreateWithoutUserInput[] | Prisma.virtual_tryonUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.virtual_tryonCreateOrConnectWithoutUserInput | Prisma.virtual_tryonCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.virtual_tryonUpsertWithWhereUniqueWithoutUserInput | Prisma.virtual_tryonUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.virtual_tryonCreateManyUserInputEnvelope
  set?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  disconnect?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  delete?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  connect?: Prisma.virtual_tryonWhereUniqueInput | Prisma.virtual_tryonWhereUniqueInput[]
  update?: Prisma.virtual_tryonUpdateWithWhereUniqueWithoutUserInput | Prisma.virtual_tryonUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.virtual_tryonUpdateManyWithWhereWithoutUserInput | Prisma.virtual_tryonUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.virtual_tryonScalarWhereInput | Prisma.virtual_tryonScalarWhereInput[]
}

export type virtual_tryonCreateWithoutUserInput = {
  id?: string
  userImageUrl: string
  outfitImageUrl: string
  generatedImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type virtual_tryonUncheckedCreateWithoutUserInput = {
  id?: string
  userImageUrl: string
  outfitImageUrl: string
  generatedImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type virtual_tryonCreateOrConnectWithoutUserInput = {
  where: Prisma.virtual_tryonWhereUniqueInput
  create: Prisma.XOR<Prisma.virtual_tryonCreateWithoutUserInput, Prisma.virtual_tryonUncheckedCreateWithoutUserInput>
}

export type virtual_tryonCreateManyUserInputEnvelope = {
  data: Prisma.virtual_tryonCreateManyUserInput | Prisma.virtual_tryonCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type virtual_tryonUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.virtual_tryonWhereUniqueInput
  update: Prisma.XOR<Prisma.virtual_tryonUpdateWithoutUserInput, Prisma.virtual_tryonUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.virtual_tryonCreateWithoutUserInput, Prisma.virtual_tryonUncheckedCreateWithoutUserInput>
}

export type virtual_tryonUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.virtual_tryonWhereUniqueInput
  data: Prisma.XOR<Prisma.virtual_tryonUpdateWithoutUserInput, Prisma.virtual_tryonUncheckedUpdateWithoutUserInput>
}

export type virtual_tryonUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.virtual_tryonScalarWhereInput
  data: Prisma.XOR<Prisma.virtual_tryonUpdateManyMutationInput, Prisma.virtual_tryonUncheckedUpdateManyWithoutUserInput>
}

export type virtual_tryonScalarWhereInput = {
  AND?: Prisma.virtual_tryonScalarWhereInput | Prisma.virtual_tryonScalarWhereInput[]
  OR?: Prisma.virtual_tryonScalarWhereInput[]
  NOT?: Prisma.virtual_tryonScalarWhereInput | Prisma.virtual_tryonScalarWhereInput[]
  id?: Prisma.StringFilter<"virtual_tryon"> | string
  userImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  userId?: Prisma.StringFilter<"virtual_tryon"> | string
  outfitImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  generatedImageUrl?: Prisma.StringFilter<"virtual_tryon"> | string
  createdAt?: Prisma.DateTimeFilter<"virtual_tryon"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"virtual_tryon"> | Date | string
}

export type virtual_tryonCreateManyUserInput = {
  id?: string
  userImageUrl: string
  outfitImageUrl: string
  generatedImageUrl: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type virtual_tryonUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  outfitImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  generatedImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type virtual_tryonUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  outfitImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  generatedImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type virtual_tryonUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  outfitImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  generatedImageUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type virtual_tryonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userImageUrl?: boolean
  userId?: boolean
  outfitImageUrl?: boolean
  generatedImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["virtual_tryon"]>

export type virtual_tryonSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userImageUrl?: boolean
  userId?: boolean
  outfitImageUrl?: boolean
  generatedImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["virtual_tryon"]>

export type virtual_tryonSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userImageUrl?: boolean
  userId?: boolean
  outfitImageUrl?: boolean
  generatedImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["virtual_tryon"]>

export type virtual_tryonSelectScalar = {
  id?: boolean
  userImageUrl?: boolean
  userId?: boolean
  outfitImageUrl?: boolean
  generatedImageUrl?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type virtual_tryonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userImageUrl" | "userId" | "outfitImageUrl" | "generatedImageUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["virtual_tryon"]>
export type virtual_tryonInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type virtual_tryonIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type virtual_tryonIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $virtual_tryonPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "virtual_tryon"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userImageUrl: string
    userId: string
    outfitImageUrl: string
    generatedImageUrl: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["virtual_tryon"]>
  composites: {}
}

export type virtual_tryonGetPayload<S extends boolean | null | undefined | virtual_tryonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload, S>

export type virtual_tryonCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<virtual_tryonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Virtual_tryonCountAggregateInputType | true
  }

export interface virtual_tryonDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['virtual_tryon'], meta: { name: 'virtual_tryon' } }
  /**
   * Find zero or one Virtual_tryon that matches the filter.
   * @param {virtual_tryonFindUniqueArgs} args - Arguments to find a Virtual_tryon
   * @example
   * // Get one Virtual_tryon
   * const virtual_tryon = await prisma.virtual_tryon.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends virtual_tryonFindUniqueArgs>(args: Prisma.SelectSubset<T, virtual_tryonFindUniqueArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Virtual_tryon that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {virtual_tryonFindUniqueOrThrowArgs} args - Arguments to find a Virtual_tryon
   * @example
   * // Get one Virtual_tryon
   * const virtual_tryon = await prisma.virtual_tryon.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends virtual_tryonFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, virtual_tryonFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Virtual_tryon that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {virtual_tryonFindFirstArgs} args - Arguments to find a Virtual_tryon
   * @example
   * // Get one Virtual_tryon
   * const virtual_tryon = await prisma.virtual_tryon.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends virtual_tryonFindFirstArgs>(args?: Prisma.SelectSubset<T, virtual_tryonFindFirstArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Virtual_tryon that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {virtual_tryonFindFirstOrThrowArgs} args - Arguments to find a Virtual_tryon
   * @example
   * // Get one Virtual_tryon
   * const virtual_tryon = await prisma.virtual_tryon.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends virtual_tryonFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, virtual_tryonFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Virtual_tryons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {virtual_tryonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Virtual_tryons
   * const virtual_tryons = await prisma.virtual_tryon.findMany()
   * 
   * // Get first 10 Virtual_tryons
   * const virtual_tryons = await prisma.virtual_tryon.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const virtual_tryonWithIdOnly = await prisma.virtual_tryon.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends virtual_tryonFindManyArgs>(args?: Prisma.SelectSubset<T, virtual_tryonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Virtual_tryon.
   * @param {virtual_tryonCreateArgs} args - Arguments to create a Virtual_tryon.
   * @example
   * // Create one Virtual_tryon
   * const Virtual_tryon = await prisma.virtual_tryon.create({
   *   data: {
   *     // ... data to create a Virtual_tryon
   *   }
   * })
   * 
   */
  create<T extends virtual_tryonCreateArgs>(args: Prisma.SelectSubset<T, virtual_tryonCreateArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Virtual_tryons.
   * @param {virtual_tryonCreateManyArgs} args - Arguments to create many Virtual_tryons.
   * @example
   * // Create many Virtual_tryons
   * const virtual_tryon = await prisma.virtual_tryon.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends virtual_tryonCreateManyArgs>(args?: Prisma.SelectSubset<T, virtual_tryonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Virtual_tryons and returns the data saved in the database.
   * @param {virtual_tryonCreateManyAndReturnArgs} args - Arguments to create many Virtual_tryons.
   * @example
   * // Create many Virtual_tryons
   * const virtual_tryon = await prisma.virtual_tryon.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Virtual_tryons and only return the `id`
   * const virtual_tryonWithIdOnly = await prisma.virtual_tryon.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends virtual_tryonCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, virtual_tryonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Virtual_tryon.
   * @param {virtual_tryonDeleteArgs} args - Arguments to delete one Virtual_tryon.
   * @example
   * // Delete one Virtual_tryon
   * const Virtual_tryon = await prisma.virtual_tryon.delete({
   *   where: {
   *     // ... filter to delete one Virtual_tryon
   *   }
   * })
   * 
   */
  delete<T extends virtual_tryonDeleteArgs>(args: Prisma.SelectSubset<T, virtual_tryonDeleteArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Virtual_tryon.
   * @param {virtual_tryonUpdateArgs} args - Arguments to update one Virtual_tryon.
   * @example
   * // Update one Virtual_tryon
   * const virtual_tryon = await prisma.virtual_tryon.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends virtual_tryonUpdateArgs>(args: Prisma.SelectSubset<T, virtual_tryonUpdateArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Virtual_tryons.
   * @param {virtual_tryonDeleteManyArgs} args - Arguments to filter Virtual_tryons to delete.
   * @example
   * // Delete a few Virtual_tryons
   * const { count } = await prisma.virtual_tryon.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends virtual_tryonDeleteManyArgs>(args?: Prisma.SelectSubset<T, virtual_tryonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Virtual_tryons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {virtual_tryonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Virtual_tryons
   * const virtual_tryon = await prisma.virtual_tryon.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends virtual_tryonUpdateManyArgs>(args: Prisma.SelectSubset<T, virtual_tryonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Virtual_tryons and returns the data updated in the database.
   * @param {virtual_tryonUpdateManyAndReturnArgs} args - Arguments to update many Virtual_tryons.
   * @example
   * // Update many Virtual_tryons
   * const virtual_tryon = await prisma.virtual_tryon.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Virtual_tryons and only return the `id`
   * const virtual_tryonWithIdOnly = await prisma.virtual_tryon.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends virtual_tryonUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, virtual_tryonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Virtual_tryon.
   * @param {virtual_tryonUpsertArgs} args - Arguments to update or create a Virtual_tryon.
   * @example
   * // Update or create a Virtual_tryon
   * const virtual_tryon = await prisma.virtual_tryon.upsert({
   *   create: {
   *     // ... data to create a Virtual_tryon
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Virtual_tryon we want to update
   *   }
   * })
   */
  upsert<T extends virtual_tryonUpsertArgs>(args: Prisma.SelectSubset<T, virtual_tryonUpsertArgs<ExtArgs>>): Prisma.Prisma__virtual_tryonClient<runtime.Types.Result.GetResult<Prisma.$virtual_tryonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Virtual_tryons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {virtual_tryonCountArgs} args - Arguments to filter Virtual_tryons to count.
   * @example
   * // Count the number of Virtual_tryons
   * const count = await prisma.virtual_tryon.count({
   *   where: {
   *     // ... the filter for the Virtual_tryons we want to count
   *   }
   * })
  **/
  count<T extends virtual_tryonCountArgs>(
    args?: Prisma.Subset<T, virtual_tryonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Virtual_tryonCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Virtual_tryon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Virtual_tryonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Virtual_tryonAggregateArgs>(args: Prisma.Subset<T, Virtual_tryonAggregateArgs>): Prisma.PrismaPromise<GetVirtual_tryonAggregateType<T>>

  /**
   * Group by Virtual_tryon.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {virtual_tryonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends virtual_tryonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: virtual_tryonGroupByArgs['orderBy'] }
      : { orderBy?: virtual_tryonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, virtual_tryonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVirtual_tryonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the virtual_tryon model
 */
readonly fields: virtual_tryonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for virtual_tryon.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__virtual_tryonClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the virtual_tryon model
 */
export interface virtual_tryonFieldRefs {
  readonly id: Prisma.FieldRef<"virtual_tryon", 'String'>
  readonly userImageUrl: Prisma.FieldRef<"virtual_tryon", 'String'>
  readonly userId: Prisma.FieldRef<"virtual_tryon", 'String'>
  readonly outfitImageUrl: Prisma.FieldRef<"virtual_tryon", 'String'>
  readonly generatedImageUrl: Prisma.FieldRef<"virtual_tryon", 'String'>
  readonly createdAt: Prisma.FieldRef<"virtual_tryon", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"virtual_tryon", 'DateTime'>
}
    

// Custom InputTypes
/**
 * virtual_tryon findUnique
 */
export type virtual_tryonFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * Filter, which virtual_tryon to fetch.
   */
  where: Prisma.virtual_tryonWhereUniqueInput
}

/**
 * virtual_tryon findUniqueOrThrow
 */
export type virtual_tryonFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * Filter, which virtual_tryon to fetch.
   */
  where: Prisma.virtual_tryonWhereUniqueInput
}

/**
 * virtual_tryon findFirst
 */
export type virtual_tryonFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * Filter, which virtual_tryon to fetch.
   */
  where?: Prisma.virtual_tryonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of virtual_tryons to fetch.
   */
  orderBy?: Prisma.virtual_tryonOrderByWithRelationInput | Prisma.virtual_tryonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for virtual_tryons.
   */
  cursor?: Prisma.virtual_tryonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` virtual_tryons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` virtual_tryons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of virtual_tryons.
   */
  distinct?: Prisma.Virtual_tryonScalarFieldEnum | Prisma.Virtual_tryonScalarFieldEnum[]
}

/**
 * virtual_tryon findFirstOrThrow
 */
export type virtual_tryonFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * Filter, which virtual_tryon to fetch.
   */
  where?: Prisma.virtual_tryonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of virtual_tryons to fetch.
   */
  orderBy?: Prisma.virtual_tryonOrderByWithRelationInput | Prisma.virtual_tryonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for virtual_tryons.
   */
  cursor?: Prisma.virtual_tryonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` virtual_tryons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` virtual_tryons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of virtual_tryons.
   */
  distinct?: Prisma.Virtual_tryonScalarFieldEnum | Prisma.Virtual_tryonScalarFieldEnum[]
}

/**
 * virtual_tryon findMany
 */
export type virtual_tryonFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * Filter, which virtual_tryons to fetch.
   */
  where?: Prisma.virtual_tryonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of virtual_tryons to fetch.
   */
  orderBy?: Prisma.virtual_tryonOrderByWithRelationInput | Prisma.virtual_tryonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing virtual_tryons.
   */
  cursor?: Prisma.virtual_tryonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` virtual_tryons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` virtual_tryons.
   */
  skip?: number
  distinct?: Prisma.Virtual_tryonScalarFieldEnum | Prisma.Virtual_tryonScalarFieldEnum[]
}

/**
 * virtual_tryon create
 */
export type virtual_tryonCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * The data needed to create a virtual_tryon.
   */
  data: Prisma.XOR<Prisma.virtual_tryonCreateInput, Prisma.virtual_tryonUncheckedCreateInput>
}

/**
 * virtual_tryon createMany
 */
export type virtual_tryonCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many virtual_tryons.
   */
  data: Prisma.virtual_tryonCreateManyInput | Prisma.virtual_tryonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * virtual_tryon createManyAndReturn
 */
export type virtual_tryonCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * The data used to create many virtual_tryons.
   */
  data: Prisma.virtual_tryonCreateManyInput | Prisma.virtual_tryonCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * virtual_tryon update
 */
export type virtual_tryonUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * The data needed to update a virtual_tryon.
   */
  data: Prisma.XOR<Prisma.virtual_tryonUpdateInput, Prisma.virtual_tryonUncheckedUpdateInput>
  /**
   * Choose, which virtual_tryon to update.
   */
  where: Prisma.virtual_tryonWhereUniqueInput
}

/**
 * virtual_tryon updateMany
 */
export type virtual_tryonUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update virtual_tryons.
   */
  data: Prisma.XOR<Prisma.virtual_tryonUpdateManyMutationInput, Prisma.virtual_tryonUncheckedUpdateManyInput>
  /**
   * Filter which virtual_tryons to update
   */
  where?: Prisma.virtual_tryonWhereInput
  /**
   * Limit how many virtual_tryons to update.
   */
  limit?: number
}

/**
 * virtual_tryon updateManyAndReturn
 */
export type virtual_tryonUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * The data used to update virtual_tryons.
   */
  data: Prisma.XOR<Prisma.virtual_tryonUpdateManyMutationInput, Prisma.virtual_tryonUncheckedUpdateManyInput>
  /**
   * Filter which virtual_tryons to update
   */
  where?: Prisma.virtual_tryonWhereInput
  /**
   * Limit how many virtual_tryons to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * virtual_tryon upsert
 */
export type virtual_tryonUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * The filter to search for the virtual_tryon to update in case it exists.
   */
  where: Prisma.virtual_tryonWhereUniqueInput
  /**
   * In case the virtual_tryon found by the `where` argument doesn't exist, create a new virtual_tryon with this data.
   */
  create: Prisma.XOR<Prisma.virtual_tryonCreateInput, Prisma.virtual_tryonUncheckedCreateInput>
  /**
   * In case the virtual_tryon was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.virtual_tryonUpdateInput, Prisma.virtual_tryonUncheckedUpdateInput>
}

/**
 * virtual_tryon delete
 */
export type virtual_tryonDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
  /**
   * Filter which virtual_tryon to delete.
   */
  where: Prisma.virtual_tryonWhereUniqueInput
}

/**
 * virtual_tryon deleteMany
 */
export type virtual_tryonDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which virtual_tryons to delete
   */
  where?: Prisma.virtual_tryonWhereInput
  /**
   * Limit how many virtual_tryons to delete.
   */
  limit?: number
}

/**
 * virtual_tryon without action
 */
export type virtual_tryonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the virtual_tryon
   */
  select?: Prisma.virtual_tryonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the virtual_tryon
   */
  omit?: Prisma.virtual_tryonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.virtual_tryonInclude<ExtArgs> | null
}
